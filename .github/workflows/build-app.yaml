name: build-app

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron:  '0 9 * * *'
  workflow_dispatch:

jobs:
  app-build:

    runs-on: inseven-macos-14

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Checkout required submodules
      run: |
        git submodule update --init --recursive --depth 1 ios/diligence
        git submodule update --init --recursive --depth 1 ios/swift-sodium
        git submodule update --init --recursive --depth 1 scripts/build-tools
        git submodule update --init --recursive --depth 1 scripts/changes

    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: scripts/install-dependencies.sh

    - name: Build, test, and release
      env:

        IPHONE_SIMULATOR: iPhone 15 Pro

        APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
        APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}

        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}

        APP_CONFIGURATION: ${{ secrets.APP_CONFIGURATION }}

        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        RELEASE: ${{ github.ref == 'refs/heads/main' }}

      run: |
        scripts/build.sh

  firmware-build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - esp32
          - esp32s2
          - esp32s3

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get nodemcu-firmware sha
      id: get-firmware-sha
      run: |
        echo "sha=$(git rev-parse HEAD:device/nodemcu/nodemcu-firmware)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache Espressif submodule and toolchain
      uses: actions/cache@v3
      with:
        path: |
          .git/modules/firmware/nodemcu-firmware
          device/nodemcu/nodemcu-firmware
          device/nodemcu/.espressif
        key: ${{ runner.os }}-espressif-toolchain-${{ steps.get-firmware-sha.outputs.sha }}

    - name: Cache NodeMCU build
      uses: actions/cache@v3
      with:
        path: |
          device/nodemcu/nodemcu-firmware/build
        key: ${{ runner.os }}-espressif-toolchain-${{ steps.get-firmware-sha.outputs.sha }}-${{ hashFiles('device/nodemcu/', matrix.target, '/sdkconfig') }}-${{ matrix.target }}

    - name: Checkout required submodules
      run: |
        git submodule update --init --recursive --depth 1 device/nodemcu/nodemcu-firmware esptool

    - name: Build
      run: |
        device/nodemcu/build.sh ${{ matrix.target }}

    - name: Archive the firmware
      uses: actions/upload-artifact@v3
      with:
        path: device/nodemcu/build-${{ matrix.target }}/firmware-${{ matrix.target }}.zip
        if-no-files-found: error

  raspberry-pi-image-build:

    strategy:
      matrix:
        include:
          - pi-gen-version: bullseye
            release: bullseye
    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Copy Python source
      run: |
        cp -R device/python/src device/python/raspberry-pi-image/00-install-statuspanel/files

    - name: Build image
      id: build
      uses: jbmorley/pi-gen-action@jbmorley/update-source
      with:
        image-name: statuspanel
        hostname: statuspanel
        stage-list: stage0 stage1 stage2 device/python/raspberry-pi-image
        pi-gen-version: ${{ matrix.pi-gen-version }}
        release: ${{ matrix.release }}
        verbose-output: true

    - name: Archive the image
      uses: actions/upload-artifact@v3
      with:
        name: pi-gen-image
        path: ${{ steps.build.outputs.image-path }}
        if-no-files-found: error
