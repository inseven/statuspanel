local bits = {
   0x00014000, 0x42004000, 0x40418001, 0x88514200, 0x020020A9, 0x00A43CF8,
   0x0A500200, 0x02000042, 0x02A11C50, 0xA8F80000, 0x0200012C, 0x02CC1E50,
   0x08000000, 0x00000000, 0x00000000, 0x00000110, 0x02088000, 0x80000000,
   0x00208208, 0xA4044000, 0x40000022, 0x80F9C404, 0xA404200F, 0x20000022,
   0x00208208, 0x02081000, 0x10801000, 0x10000110, 0x00000800, 0x08000800,
   0x00000000, 0xC21C0000, 0xF98F9071, 0x988A2322, 0x02228040, 0x40209482,
   0x9261822A, 0x422221E7, 0x12283E80, 0x90882222, 0xE71C1228, 0x11C71073,
   0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x071C0000, 0x70402000,
   0x100008A2, 0x88A28880, 0x810F8800, 0x04400F1C, 0x08224200, 0x210F8800,
   0x10008422, 0x031C0080, 0x20402040, 0x00400000, 0x00000000, 0x00000020,
   0x00000000, 0xE71C0000, 0x73EF8E71, 0x928A28A2, 0x28BA8820, 0x0820A20A,
   0xA209EFAA, 0x28BAC9E7, 0x8820A20A, 0x928A2882, 0xE8BC8820, 0x702F8E71,
   0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x87220000, 0x7228828B,
   0x824A0222, 0x02228A6D, 0x8AAA822A, 0x821A023E, 0x02228B28, 0x8A28822A,
   0x824A0222, 0xE7228A28, 0x7228BE89, 0x00000000, 0x00000000, 0x00000000,
   0x00000000, 0xE71E0000, 0x8A28BE71, 0x888A28A2, 0x28A28A28, 0x8A28880A,
   0x8871E89E, 0xAA82A948, 0xA9488880, 0x88892C82, 0x27025088, 0x50870872,
   0x00000800, 0x00000000, 0x00000000, 0x02700000, 0xE8A20007, 0x00840213,
   0x041208A2, 0x08940144, 0x02240411, 0x08108508, 0x42140004, 0x00040810,
   0x10102222, 0xE2220004, 0x00041013, 0x20700000, 0x0000FC07, 0x00002000,
   0x20002008, 0x20080000, 0x03802000, 0x20002010, 0xE7000040, 0xF0473C71,
   0xA28A2800, 0x2F0089E8, 0x884FA20A, 0xA20A2880, 0xEF008840, 0xF04F3CF1,
   0x00000000, 0x00008000, 0x70000000, 0x0C100002, 0x02020000, 0x00000811,
   0x08100002, 0x831A0000, 0x71A58891, 0x88510226, 0x02228A6A, 0x8A2A8831,
   0x88510222, 0x02228A2A, 0x722A8891, 0x00012000, 0xC0000000, 0x00000000,
   0x00000000, 0x00000000, 0x00000400, 0x04000000, 0xAF1E0000, 0x8A289CF1,
   0x840A68A2, 0x28A2AA28, 0xA9488470, 0xA48028A2, 0x2F1E514C, 0x508B1878,
   0x00000802, 0x08020000, 0x00000000, 0x08400000, 0x0000F801, 0x88020820,
   0x08200000, 0xE8A28802, 0x88020823, 0x08110894, 0x88888A64, 0x89920820,
   0x08204C94, 0xEB228802, 0x88020823, 0x08400800, 0x0700F801, 0x00000000,
}

local string_byte = string.byte
local charw = 6
local charh = 10
local stride = 48 -- also the width

local function getPixel(ch, x, y)
    ch = string_byte(ch)
    if ch < 32 or ch >= 0x80 then
        ch = 0x7F
    end
    -- chidx is the index into the image's chars, starting with zero being the
    -- space character. chx and chy are the starting positions of that char in
    -- the image.
    local chidx = ch - 32
    local chx = (chidx & 7) * charw
    local chy = (chidx >> 3) * charh
    local bitidx = (chy + y) * stride + chx + x
    local word = bits[1 + (bitidx // 32)]
    return (word & (1 << (bitidx & 0x1F))) ~= 0
end

return {
   getPixel = getPixel,
   charw = charw,
   charh = charh,
}
