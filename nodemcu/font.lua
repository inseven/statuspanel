local bits = {
   0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x00, 0x42, 0x01, 0x80, 0x41, 0x40,
   0x00, 0x42, 0x51, 0x88, 0xA9, 0x20, 0x00, 0x02, 0xF8, 0x3C, 0xA4, 0x00,
   0x00, 0x02, 0x50, 0x0A, 0x42, 0x00, 0x00, 0x02, 0x50, 0x1C, 0xA1, 0x02,
   0x00, 0x00, 0xF8, 0xA8, 0x2C, 0x01, 0x00, 0x02, 0x50, 0x1E, 0xCC, 0x02,
   0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x10, 0x01, 0x00, 0x00, 0x00, 0x80, 0x08, 0x02, 0x00, 0x00, 0x00, 0x80,
   0x08, 0x82, 0x20, 0x00, 0x00, 0x40, 0x04, 0xA4, 0x22, 0x00, 0x00, 0x40,
   0x04, 0xC4, 0xF9, 0x80, 0x0F, 0x20, 0x04, 0xA4, 0x22, 0x00, 0x00, 0x20,
   0x08, 0x82, 0x20, 0x00, 0x00, 0x10, 0x08, 0x02, 0x00, 0x10, 0x80, 0x10,
   0x10, 0x01, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xC2, 0x71, 0x90, 0x8F, 0xF9,
   0x22, 0x23, 0x8A, 0x98, 0x40, 0x80, 0x22, 0x02, 0x82, 0x94, 0x20, 0x40,
   0x2A, 0x82, 0x61, 0x92, 0xE7, 0x21, 0x22, 0x42, 0x80, 0x3E, 0x28, 0x12,
   0x22, 0x22, 0x88, 0x90, 0x28, 0x12, 0x1C, 0xE7, 0x73, 0x10, 0xC7, 0x11,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x20, 0x40, 0x70,
   0xA2, 0x08, 0x00, 0x10, 0x80, 0x88, 0xA2, 0x88, 0x00, 0x88, 0x0F, 0x81,
   0x1C, 0x0F, 0x40, 0x04, 0x00, 0x42, 0x22, 0x08, 0x00, 0x88, 0x0F, 0x21,
   0x22, 0x84, 0x00, 0x10, 0x80, 0x00, 0x1C, 0x03, 0x40, 0x20, 0x40, 0x20,
   0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xE7, 0x71, 0x8E, 0xEF, 0x73,
   0xA2, 0x28, 0x8A, 0x92, 0x20, 0x88, 0xBA, 0x28, 0x0A, 0xA2, 0x20, 0x08,
   0xAA, 0xEF, 0x09, 0xA2, 0xE7, 0xC9, 0xBA, 0x28, 0x0A, 0xA2, 0x20, 0x88,
   0x82, 0x28, 0x8A, 0x92, 0x20, 0x88, 0xBC, 0xE8, 0x71, 0x8E, 0x2F, 0x70,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x87, 0x8B, 0x82, 0x28, 0x72,
   0x22, 0x02, 0x4A, 0x82, 0x6D, 0x8A, 0x22, 0x02, 0x2A, 0x82, 0xAA, 0x8A,
   0x3E, 0x02, 0x1A, 0x82, 0x28, 0x8B, 0x22, 0x02, 0x2A, 0x82, 0x28, 0x8A,
   0x22, 0x02, 0x4A, 0x82, 0x28, 0x8A, 0x22, 0xE7, 0x89, 0xBE, 0x28, 0x72,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xE7, 0x71, 0xBE, 0x28, 0x8A,
   0xA2, 0x28, 0x8A, 0x88, 0x28, 0x8A, 0xA2, 0x28, 0x0A, 0x88, 0x28, 0x8A,
   0x9E, 0xE8, 0x71, 0x88, 0x48, 0xA9, 0x82, 0xAA, 0x80, 0x88, 0x48, 0xA9,
   0x82, 0x2C, 0x89, 0x88, 0x88, 0x50, 0x02, 0x27, 0x72, 0x08, 0x87, 0x50,
   0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x70, 0x02, 0x07, 0x00, 0xA2, 0xE8, 0x13, 0x02, 0x84, 0x00,
   0xA2, 0x08, 0x12, 0x04, 0x44, 0x01, 0x94, 0x08, 0x11, 0x04, 0x24, 0x02,
   0x08, 0x85, 0x10, 0x08, 0x04, 0x00, 0x14, 0x42, 0x10, 0x08, 0x04, 0x00,
   0x22, 0x22, 0x10, 0x10, 0x04, 0x00, 0x22, 0xE2, 0x13, 0x10, 0x04, 0x00,
   0x00, 0x00, 0x70, 0x20, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
   0x08, 0x20, 0x00, 0x20, 0x00, 0x00, 0x08, 0x20, 0x00, 0x20, 0x80, 0x03,
   0x10, 0x20, 0x00, 0x20, 0x40, 0x00, 0x00, 0xE7, 0x71, 0x3C, 0x47, 0xF0,
   0x00, 0x28, 0x8A, 0xA2, 0xE8, 0x89, 0x00, 0x2F, 0x0A, 0xA2, 0x4F, 0x88,
   0x80, 0x28, 0x0A, 0xA2, 0x40, 0x88, 0x00, 0xEF, 0xF1, 0x3C, 0x4F, 0xF0,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
   0x02, 0x00, 0x10, 0x0C, 0x00, 0x00, 0x02, 0x02, 0x11, 0x08, 0x00, 0x00,
   0x02, 0x00, 0x10, 0x08, 0x00, 0x00, 0x1A, 0x83, 0x91, 0x88, 0xA5, 0x71,
   0x26, 0x02, 0x51, 0x88, 0x6A, 0x8A, 0x22, 0x02, 0x31, 0x88, 0x2A, 0x8A,
   0x22, 0x02, 0x51, 0x88, 0x2A, 0x8A, 0x22, 0x02, 0x91, 0x88, 0x2A, 0x72,
   0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x1E, 0xAF, 0xF1, 0x9C, 0x28, 0x8A,
   0xA2, 0x68, 0x0A, 0x84, 0x28, 0xAA, 0xA2, 0x28, 0x70, 0x84, 0x48, 0xA9,
   0xA2, 0x28, 0x80, 0xA4, 0x4C, 0x51, 0x1E, 0x2F, 0x78, 0x18, 0x8B, 0x50,
   0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x40, 0x08, 0x01, 0xF8, 0x00, 0x00, 0x20, 0x08, 0x02, 0x88,
   0x00, 0x00, 0x20, 0x08, 0x02, 0x88, 0xA2, 0xE8, 0x23, 0x08, 0x02, 0x88,
   0x94, 0x08, 0x11, 0x08, 0x64, 0x8A, 0x88, 0x88, 0x20, 0x08, 0x92, 0x89,
   0x94, 0x4C, 0x20, 0x08, 0x02, 0x88, 0x22, 0xEB, 0x23, 0x08, 0x02, 0x88,
   0x00, 0x08, 0x40, 0x08, 0x01, 0xF8, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00
}

local string_byte = string.byte
local charw = 6
local charh = 10
local stride = 48 -- also the width

local function getBit(bitidx)
    local byte = bits[bit.rshift(bitidx, 3) + 1] -- bits[(bitidx >> 3) + 1]
    return bit.band(byte, bit.lshift(1, bit.band(bitidx, 7))) ~= 0 -- byte & (1<<(bitidx & 0x7))
end

local function getPixel(ch, x, y)
    ch = string_byte(ch)
    if ch < 32 or ch >= 0x80 then
        ch = 0x7F
    end
    -- chidx is the index into the image's chars, starting with zero being the
    -- space character. chx and chy are the starting positions of that char in
    -- the image.
    local chidx = ch - 32
    -- Ugh, if only NodeMCU/eLua would update to Lua 5.3...
    local chx = bit.band(chidx, 7) * charw
    local chy = bit.rshift(chidx, 3) * charh
    local bitidx = (chy + y) * stride + chx + x
    return getBit(bitidx)
end

return {
   getPixel = getPixel,
   charw = charw,
   charh = charh,
}
